


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             HammingCode, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         ; Define memory address for Hamming code
    4 00000000 E59F00C4        LDR              R0, =0x00000BA6 
                                                            ;101110100110 => 
    5 00000004 E3A01101        LDR              R1, =0x40000000
    6 00000008 E3A02000        MOV              R2, #0
    7 0000000C E3A03000        MOV              R3, #0
    8 00000010 E3A04111        LDR              R4, =0x40000004
    9 00000014 E3A07000        MOV              R7, #0
   10 00000018 E3A06000        MOV              R6, #0
   11 0000001C         ; Load the Hamming code from memory
   12 0000001C         
   13 0000001C E1A03000        MOV              R3, R0      ; make a copy
   14 00000020         
   15 00000020 E3C330FF        BIC              R3, R3, #0xFF
   16 00000024 E1A06263        MOV              R6, R3, ROR #4
   17 00000028         ;7654****
   18 00000028 E59F50A0        LDR              R5, = 0xF8F
   19 0000002C E1C03005        BIC              R3, R0, R5
   20 00000030 E18661E3        ORR              R6, R6 ,R3, ROR #3
   21 00000034         ;7654321*
   22 00000034         ; Store the result in R2
   23 00000034 E59F5098        LDR              R5, = 0xFFB
   24 00000038 E1C03005        BIC              R3, R0, R5
   25 0000003C E1866163        ORR              R6, R6 ,R3, ROR #2
   26 00000040         ; Load the ckackbit from memory
   27 00000040         
   28 00000040 E59F5090        LDR              R5, = 0xF7F
   29 00000044 E1C03005        BIC              R3, R0, R5
   30 00000048 E1877263        ORR              R7, R7 ,R3, ROR #4
   31 0000004C         
   32 0000004C E59F5088        LDR              R5, = 0xFF7
   33 00000050 E1C03005        BIC              R3, R0, R5
   34 00000054 E18770E3        ORR              R7, R7 ,R3, ROR #1
   35 00000058         
   36 00000058 E59F5080        LDR              R5, = 0xFFc
   37 0000005C E1C03005        BIC              R3, R0, R5
   38 00000060 E1877003        ORR              R7, R7 ,R3
   39 00000064         ;R6 => 8-bit data from 12-bit data
   40 00000064         ;R0 => 12-bit data
   41 00000064         ;R7 => checksum bit from 12-bit data
   42 00000064         
   43 00000064 E1A03006        MOV              R3, R6
   44 00000068         
   45 00000068         ;C0
   46 00000068 E02330E6        EOR              R3, R3, R6, ROR #1 ; 1 XOR 0
   47 0000006C E02331E6        EOR              R3, R3, R6, ROR #3 
                                                            ; 3 XOR 1 XOR 0
   48 00000070 E0233266        EOR              R3, R3, R6, ROR #4 ; 4 XOR 3 XO
                                                            R 1 XOR 0
   49 00000074 E0233366        EOR              R3, R3, R6, ROR #6 ; 6 XOR 4 XO
                                                            R 3 XOR 1 XOR 0
   50 00000078 E2032001        AND              R2, R3, #1
   51 0000007C         ;C1
   52 0000007C E1A03006        MOV              R3, R6
   53 00000080 E0233166        EOR              R3, R3, R6, ROR #2 ; 2 XOR 0
   54 00000084 E02331E6        EOR              R3, R3, R6, ROR #3 
                                                            ; 3 XOR 2 XOR 0



ARM Macro Assembler    Page 2 


   55 00000088 E02332E6        EOR              R3, R3, R6, ROR #5 ; 5 XOR 3 XO
                                                            R 2 XOR 0
   56 0000008C E0233366        EOR              R3, R3, R6, ROR #6 ; 6 XOR 4 XO
                                                            R 3 XOR 2 XOR 0
   57 00000090 E2033001        AND              R3, R3, #1
   58 00000094 E1822083        ORR              R2, R2, R3, LSL #1
   59 00000098         ;C2
   60 00000098 E1A030E6        ROR              R3, R6, #1  ; get bit 1
   61 0000009C E0233166        EOR              R3, R3, R6, ROR #2 ; 2 XOR 1
   62 000000A0 E02331E6        EOR              R3, R3, R6, ROR #3 
                                                            ; 3 XOR 2 XOR 1
   63 000000A4 E02333E6        EOR              R3, R3, R6, ROR #7 ; 7 XOR 3 XO
                                                            R 2 XOR 1
   64 000000A8 E2033001        AND              R3, R3, #1
   65 000000AC E1822103        ORR              R2, R2, R3, LSL #2
   66 000000B0         
   67 000000B0 E1A03266        ROR              R3, R6, #4  ; get bit 4
   68 000000B4 E02332E6        EOR              R3, R3, R6, ROR #5 ; 5 XOR 4
   69 000000B8 E0233366        EOR              R3, R3, R6, ROR #6 
                                                            ; 6 XOR 5 XOR 4
   70 000000BC E02333E6        EOR              R3, R3, R6, ROR #7 ; 7 XOR 6 XO
                                                            R 5 XOR 4
   71 000000C0 E2033001        AND              R3, R3, #1
   72 000000C4 E1822183        ORR              R2, R2, R3, LSL #3
   73 000000C8         ;R2 => checksum bit from 8-bit data
   74 000000C8         
   75 000000C8         ; End of program
   76 000000C8 EAFFFFFE 
                       STOP    B                STOP
   77 000000CC                 END
              00000BA6 
              00000F8F 
              00000FFB 
              00000F7F 
              00000FF7 
              00000FFC 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 528" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HammingCode 00000000

Symbol: HammingCode
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: HammingCode unused
STOP 000000C8

Symbol: STOP
   Definitions
      At line 76 in file main.s
   Uses
      At line 76 in file main.s
Comment: STOP used once
2 symbols
336 symbols in table
