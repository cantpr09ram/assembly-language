


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             hw4, CODE
    2 00000000                 ENTRY
    3 00000000         ; registers used:
    4 00000000         ; r0 - used to hold the 12-bit data
    5 00000000         ; r1 - temp
    6 00000000         ; r2 - used to hold address of data
    7 00000000         ; r3 - used to hold the faulty checksum index
    8 00000000         ; r4 - temp
    9 00000000         ; r5 - hold the index of the faulty bit (12 bit)
   10 00000000         ; r6 - holds the 8-bit data
   11 00000000         ; r7 - temp
   12 00000000         ; r8 - big counter
   13 00000000         ;411440430 \u8b19
   14 00000000 E3A08006        MOV              r8, #6
   15 00000004 E28F2E12        ADR              r2, data
   16 00000008         main
   17 00000008 E3A03000        MOV              r3, #0
   18 0000000C E3A06000        MOV              r6, #0
   19 00000010 E0D200B2        LDRH             r0, [r2], #2
   20 00000014         
   21 00000014 E1A04000        MOV              r4, r0      ; makes a copy
   22 00000018         ; check c0 ---------------------------------------------
                       -|
   23 00000018 E0244160        EOR              r4, r4, r0, ROR #2
   24 0000001C E0244260        EOR              r4, r4, r0, ROR #4
   25 00000020 E0244360        EOR              r4, r4, r0, ROR #6
   26 00000024 E0244460        EOR              r4, r4, r0, ROR #8
   27 00000028 E0244560        EOR              r4, r4, r0, ROR #10
   28 0000002C E2144001        ANDS             r4, r4, #1  ; isolate bit
   29 00000030         
   30 00000030         ; if the Z flag is clear(not zero), the c0 parity isn't 
                       even
   31 00000030 13833001        ORRNE            r3, r3, #1  ; AND the bits to f
                                                            ind the matching on
                                                            es
   32 00000034         
   33 00000034         ; check c1 ---------------------------------------------
                       -|
   34 00000034 E1A040E0        ROR              r4, r0, #1  ; get bit 1
   35 00000038 E0244160        EOR              r4, r4, r0, ROR #2 ; 2 XOR 1
   36 0000003C E02442E0        EOR              r4, r4, r0, ROR #5
   37 00000040 E0244360        EOR              r4, r4, r0, ROR #6
   38 00000044 E02444E0        EOR              r4, r4, r0, ROR #9
   39 00000048 E0244560        EOR              r4, r4, r0, ROR #10
   40 0000004C E2144001        ANDS             r4, r4, #1  ; isolate bit
   41 00000050         
   42 00000050         ; if the Z flag is clear, the c1 parity isn't even
   43 00000050 13833002        ORRNE            r3, r3, #2
   44 00000054         
   45 00000054         ; check c2 ---------------------------------------------
                       -|
   46 00000054 E1A041E0        ROR              r4, r0, #3  ; get bit 3
   47 00000058 E0244260        EOR              r4, r4, r0, ROR #4 ; 3 XOR 4
   48 0000005C E02442E0        EOR              r4, r4, r0, ROR #5
   49 00000060 E0244360        EOR              r4, r4, r0, ROR #6
   50 00000064 E02445E0        EOR              r4, r4, r0, ROR #11
   51 00000068 E2144001        ANDS             r4, r4, #1  ; isolate bit
   52 0000006C         
   53 0000006C         ;411440430 \u8b19



ARM Macro Assembler    Page 2 


   54 0000006C         ; if the Z flag is clear, the c2 parity isn't even
   55 0000006C 13833004        ORRNE            r3, r3, #4
   56 00000070         
   57 00000070         ; check c3 ---------------------------------------------
                       -|
   58 00000070 E1A043E0        ROR              r4, r0, #7  ; get bit 7
   59 00000074 E0244460        EOR              r4, r4, r0, ROR #8
   60 00000078 E02444E0        EOR              r4, r4, r0, ROR #9
   61 0000007C E0244560        EOR              r4, r4, r0, ROR #10
   62 00000080 E02445E0        EOR              r4, r4, r0, ROR #11
   63 00000084 E2144001        ANDS             r4, r4, #1
   64 00000088         
   65 00000088         ; if the Z flag is clear, the c3 parity isn't even
   66 00000088 13833008        ORRNE            r3, r3, #8
   67 0000008C         
   68 0000008C         ; checking stage... ------------------------------------
                       -|
   69 0000008C         ; check how many faulty checksums there are
   70 0000008C         ;(if r4==0|1->build, 2|3->fix, 4->unfixable)
   71 0000008C E3A04000        MOV              r4, #0      ; clear r4
   72 00000090 E3A07000        MOV              r7, #0      ; clear r7
   73 00000094         errcnt                               ;411440430 \u8b19
   74 00000094 E3570003        CMP              r7, #3
   75 00000098 E1A05773        ROR              r5, r3, r7  ; get bit
   76 0000009C E2055001        AND              r5, r5, #1  ; isolate bit
   77 000000A0 E0844005        ADD              r4, r4, r5
   78 000000A4 E2877001        ADD              r7, r7, #1
   79 000000A8 1AFFFFF9        BNE              errcnt
   80 000000AC         
   81 000000AC E3540000        CMP              r4, #0      ; there's no error 
                                                            here
   82 000000B0 0A000011        BEQ              build
   83 000000B4 E3540001        CMP              r4, #1
   84 000000B8 0A00000F        BEQ              build
   85 000000BC E3540004        CMP              r4, #4      ; too many errors, 
                                                            terminates program
   86 000000C0 0A000018        BEQ              stop
   87 000000C4         
   88 000000C4         ; find the faulty bit-----------------------------------
                       --|
   89 000000C4 E3E05000        MVN              r5, #0      ; set to -1
   90 000000C8 E3A07000        MOV              r7, #0      ; clear r7
   91 000000CC         findb
   92 000000CC E3570003        CMP              r7, #3
   93 000000D0 E1A04773        ROR              r4, r3, r7  ; get bit
   94 000000D4 E2044001        AND              r4, r4, #1  ; isolate bit
   95 000000D8 E0855714        ADD              r5, r5, r4, LSL r7
   96 000000DC E2877001        ADD              r7, r7, #1
   97 000000E0 1AFFFFF9        BNE              findb
   98 000000E4         ; r5 now has the index of faulty bit
   99 000000E4         
  100 000000E4 E1A04570        ROR              r4, r0, r5  ; get the faulty bi
                                                            t
  101 000000E8 E2244001        EOR              r4, r4, #1  ; invert the faulty
                                                             bit
  102 000000EC E2457020        SUB              r7, r5, #32
  103 000000F0 E1E01007        MVN              r1, r7      ; 
  104 000000F4 E2817001        ADD              r7, r1, #1
  105 000000F8 E1A00774        ROR              r0, r4, r7



ARM Macro Assembler    Page 3 


  106 000000FC         
  107 000000FC         ;411440430 \u8b19
  108 000000FC         ; build the 8-bit data
  109 000000FC         ; if there's any error in the 12-bit data, it should've 
                       been fixed
  110 000000FC E1A04160 
                       build   ROR              r4, r0, #2  ; (1)get bit 2 from
                                                             12 bit data
  111 00000100 E2046001        AND              r6, r4, #1  ; isolate bit and e
                                                            mplace to 8 bit dat
                                                            a
  112 00000104         
  113 00000104 E1A041E0        ROR              r4, r0, #3  ; (2)get bit 4~6 to
                                                             the correct place
  114 00000108 E204400E        AND              r4, r4, #0xE ; isolate bit
  115 0000010C E1866004        ORR              r6, r6, r4  ; emplace the 3~1 b
                                                            its into 8 bit data
                                                            
  116 00000110         
  117 00000110 E1A04260        ROR              r4, r0, #4  ; (3)get bit 8~11 t
                                                            o the correct place
                                                            
  118 00000114 E20440F0        AND              r4, r4, #0xF0 ; isolate bit
  119 00000118 E1866004        ORR              r6, r6, r4  ; emplace the 4~7 b
                                                            its into 8-bit data
                                                            
  120 0000011C         ; r6 now has the correct 8-bit data
  121 0000011C         
  122 0000011C E3580000        CMP              r8, #0      ; big counter
  123 00000120 E2488001        SUB              r8, #1
  124 00000124 1AFFFFB7        BNE              main
  125 00000128                 ALIGN
  126 00000128 EAFFFFFE 
                       stop    B                stop
  127 0000012C         ;411440430 \u8b19
  128 0000012C         data
  129 0000012C A5 0B           DCW              0xBA5       ; 12 bit data for 0
                                                            xB5
  130 0000012E A7 0B A4 
              0B AE 0B 
              26 0B A5 
              0B 2E 0B         DCW              0xBA7, 0xBA4, 0xBAE, 0xB26, 0xB
A5, 0xB2E
  131 0000013A                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 528" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

build 000000FC

Symbol: build
   Definitions
      At line 110 in file main.s
   Uses
      At line 82 in file main.s
      At line 84 in file main.s

data 0000012C

Symbol: data
   Definitions
      At line 128 in file main.s
   Uses
      At line 15 in file main.s
Comment: data used once
errcnt 00000094

Symbol: errcnt
   Definitions
      At line 73 in file main.s
   Uses
      At line 79 in file main.s
Comment: errcnt used once
findb 000000CC

Symbol: findb
   Definitions
      At line 91 in file main.s
   Uses
      At line 97 in file main.s
Comment: findb used once
hw4 00000000

Symbol: hw4
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: hw4 unused
main 00000008

Symbol: main
   Definitions
      At line 16 in file main.s
   Uses
      At line 124 in file main.s
Comment: main used once
stop 00000128

Symbol: stop
   Definitions
      At line 126 in file main.s
   Uses
      At line 86 in file main.s
      At line 126 in file main.s

7 symbols



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

339 symbols in table
