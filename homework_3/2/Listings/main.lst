


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             HAMMING, CODE
    2 00000000                 ENTRY
    3 00000000         ;registers used
    4 00000000         ;R0 - temp
    5 00000000         ;R1 - used to hold address of data
    6 00000000         ;R2 - holds value to be transmitted
    7 00000000         ;R4 - temp
    8 00000000         ;R5 - temp
    9 00000000         ;R6 - counter
   10 00000000         ;R7 - address
   11 00000000         main
   12 00000000         
   13 00000000 E3A02000        MOV              r2, #0      ; clear out transmi
                                                            tting reg
   14 00000004 E28F10A4        ADR              r1, arraya  ; start of constant
                                                            s
   15 00000008 E3A05000        MOV              r5, #0
   16 0000000C E3A06000        MOV              r6, #0
   17 00000010 E3A07101        LDR              r7, =0x40000000
   18 00000014         LOOP
   19 00000014 E4D10001        LDRB             r0, [r1], #1
   20 00000018 E3500000        CMP              r0, #0
   21 0000001C 0A000022        BEQ              done        ;If zero, exit the 
                                                            loop
   22 00000020         ;
   23 00000020         ; calculate c0 using bits 76543210
   24 00000020         ;                          * ** ** 
   25 00000020         ; even parity, so result of XORs is the value of c0
   26 00000020         ;411440430 bo-chain
   27 00000020 E1A04000        MOV              r4, r0      ; make a copy
   28 00000024 E02440E0        EOR              r4, r4, r0, ROR #1 ; 1 XOR 0
   29 00000028 E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 1 XOR 0
   30 0000002C E0244260        EOR              r4, r4, r0, ROR #4 ; 4 XOR 3 XO
                                                            R 1 XOR 0
   31 00000030 E0244360        EOR              r4, r4, r0, ROR #6 ; 6 XOR 4 XO
                                                            R 3 XOR 1 XOR 0
   32 00000034 E2042001        AND              r2, r4, #1  ; create c0 -> R2
   33 00000038         ;
   34 00000038         ; calculate c1 using bits 76543210
   35 00000038         ;                          ** ** *
   36 00000038         ;411440430 bo-chain
   37 00000038 E1A04000        MOV              r4, r0
   38 0000003C E0244160        EOR              r4, r4, r0, ROR #2 ; 2 XOR 0
   39 00000040 E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 2 XOR 0
   40 00000044 E02442E0        EOR              r4, r4, r0, ROR #5 ; 5 XOR 3 XO
                                                            R 2 XOR 0
   41 00000048 E0244360        EOR              r4, r4, r0, ROR #6 ; 6 XOR 5 XO
                                                            R 3 XOR 2 XOR 0
   42 0000004C E2044001        AND              r4, r4, #1  ; isolate bit
   43 00000050 E1822084        ORR              r2, r2, r4, LSL #1 
                                                            ; 7 6 5 4 3 2 c1 c0
                                                            
   44 00000054         ;
   45 00000054         ; calculate c2 using bits 76543210
   46 00000054         ;                         *   ***
   47 00000054         ;411440430 bo-chain
   48 00000054 E1A040E0        ROR              r4, r0, #1  ; get bit 1



ARM Macro Assembler    Page 2 


   49 00000058 E0244160        EOR              r4, r4, r0, ROR #2 ; 2 XOR 1
   50 0000005C E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 2 XOR 1
   51 00000060 E02443E0        EOR              r4, r4, r0, ROR #7 ; 7 XOR 3 XO
                                                            R 2 XOR 1
   52 00000064 E2044001        AND              r4, r4, #1  ; isolate bit
   53 00000068 E1822EE4        ORR              r2, r2, r4, ROR #29 ; 7 6 5 4 c
                                                            2 2 c1 c0
   54 0000006C         ;
   55 0000006C         ; calculate c3 using bits 76543210
   56 0000006C         ;                         ****
   57 0000006C         ;411440430 bo-chain
   58 0000006C E1A04260        ROR              r4, r0, #4  ; get bit 4
   59 00000070 E02442E0        EOR              r4, r4, r0, ROR #5 ; 5 XOR 4
   60 00000074 E0244360        EOR              r4, r4, r0, ROR #6 
                                                            ; 6 XOR 5 XOR 4
   61 00000078 E02443E0        EOR              r4, r4, r0, ROR #7 ; 7 XOR 6 XO
                                                            R 5 XOR 4
   62 0000007C E2044001        AND              r4, r4, #1
   63 00000080         ;
   64 00000080         ; build the final 12-bit result
   65 00000080         ;
   66 00000080 E1822CE4        ORR              r2, r2, r4, ROR #25 ; rotate le
                                                            ft 7 bits
   67 00000084 E2004001        AND              r4, r0, #1  ; get bit 0 from or
                                                            iginal
   68 00000088 E1822104        ORR              r2, r2, r4, LSL #2 ; add bit 0 
                                                            into final
   69 0000008C E3C040F1        BIC              r4, r0, #0xF1 ; get bits 3,2,1
   70 00000090 E1822184        ORR              r2, r2, r4, LSL #3 ; add bits 3
                                                            ,2,1 to final
   71 00000094 E3C0400F        BIC              r4, r0, #0x0F 
                                                            ; get upper nibble
   72 00000098 E1822204        ORR              r2, r2, r4, LSL #4 ; r2 now con
                                                            tains 12 bits
   73 0000009C         
   74 0000009C         
   75 0000009C         ; Concatenate the calculated Hamming Code to the result 
                       register (r5)
   76 0000009C         
   77 0000009C E4872004        STR              r2, [r7], #4
   78 000000A0         ; Increment the counter
   79 000000A0 E2866001        ADD              r6, r6, #1
   80 000000A4         ; Continue the loop
   81 000000A4 E3560004        CMP              r6, #4      ; Check if four byt
                                                            es have been proces
                                                            sed
   82 000000A8 BAFFFFD9        BLT              LOOP
   83 000000AC         
   84 000000AC         
   85 000000AC         ; with checksums
   86 000000AC EAFFFFFE 
                       done    B                done
   87 000000B0                 ALIGN
   88 000000B0         arraya
   89 000000B0 B5              DCB              0xB5
   90 000000B1 AA              DCB              0xAA
   91 000000B2 55              DCB              0x55
   92 000000B3 AA              DCB              0xAA



ARM Macro Assembler    Page 3 


   93 000000B4                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 528" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HAMMING 00000000

Symbol: HAMMING
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: HAMMING unused
LOOP 00000014

Symbol: LOOP
   Definitions
      At line 18 in file main.s
   Uses
      At line 82 in file main.s
Comment: LOOP used once
arraya 000000B0

Symbol: arraya
   Definitions
      At line 88 in file main.s
   Uses
      At line 14 in file main.s
Comment: arraya used once
done 000000AC

Symbol: done
   Definitions
      At line 86 in file main.s
   Uses
      At line 21 in file main.s
      At line 86 in file main.s

main 00000000

Symbol: main
   Definitions
      At line 11 in file main.s
   Uses
      None
Comment: main unused
5 symbols
337 symbols in table
