


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             HAMMING, CODE
    2 00000000                 ENTRY
    3 00000000         ;registers used
    4 00000000         ;R0 - temp
    5 00000000         ;R1 - used to hold address of data
    6 00000000         ;R2 - holds value to be transmitted
    7 00000000         ;R4 - temp
    8 00000000         ;R5 - storage address
    9 00000000         main
   10 00000000         
   11 00000000 E3A02000        MOV              r2, #0      ; clear out transmi
                                                            tting reg
   12 00000004 E28F1088        ADR              r1, arraya  ; start of constant
                                                            s
   13 00000008 E5D10000        LDRB             r0, [r1]
   14 0000000C E3A05101        LDR              r5, =0x40000000
   15 00000010         ;
   16 00000010         ; calculate c0 using bits 76543210
   17 00000010         ;                          * ** ** 
   18 00000010         ; even parity, so result of XORs is the value of c0
   19 00000010         ;
   20 00000010 E1A04000        MOV              r4, r0      ; make a copy
   21 00000014 E02440E0        EOR              r4, r4, r0, ROR #1 ; 1 XOR 0
   22 00000018 E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 1 XOR 0
   23 0000001C E0244260        EOR              r4, r4, r0, ROR #4 ; 4 XOR 3 XO
                                                            R 1 XOR 0
   24 00000020 E0244360        EOR              r4, r4, r0, ROR #6 ; 6 XOR 4 XO
                                                            R 3 XOR 1 XOR 0
   25 00000024 E2042001        AND              r2, r4, #1  ; create c0 -> R2
   26 00000028         ;
   27 00000028         ; calculate c1 using bits 76543210
   28 00000028         ;                          ** ** *
   29 00000028 E1A04000        MOV              r4, r0
   30 0000002C E0244160        EOR              r4, r4, r0, ROR #2 ; 2 XOR 0
   31 00000030 E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 2 XOR 0
   32 00000034 E02442E0        EOR              r4, r4, r0, ROR #5 ; 5 XOR 3 XO
                                                            R 2 XOR 0
   33 00000038 E0244360        EOR              r4, r4, r0, ROR #6 ; 6 XOR 5 XO
                                                            R 3 XOR 2 XOR 0
   34 0000003C E2044001        AND              r4, r4, #1  ; isolate bit
   35 00000040 E1822084        ORR              r2, r2, r4, LSL #1 
                                                            ; 7 6 5 4 3 2 c1 c0
                                                            
   36 00000044         ;
   37 00000044         ; calculate c2 using bits 76543210
   38 00000044         ;                         *   ***
   39 00000044 E1A040E0        ROR              r4, r0, #1  ; get bit 1
   40 00000048 E0244160        EOR              r4, r4, r0, ROR #2 ; 2 XOR 1
   41 0000004C E02441E0        EOR              r4, r4, r0, ROR #3 
                                                            ; 3 XOR 2 XOR 1
   42 00000050 E02443E0        EOR              r4, r4, r0, ROR #7 ; 7 XOR 3 XO
                                                            R 2 XOR 1
   43 00000054 E2044001        AND              r4, r4, #1  ; isolate bit
   44 00000058 E1822EE4        ORR              r2, r2, r4, ROR #29 ; 7 6 5 4 c
                                                            2 2 c1 c0
   45 0000005C         ;
   46 0000005C         ; calculate c3 using bits 76543210



ARM Macro Assembler    Page 2 


   47 0000005C         ;                         ****
   48 0000005C E1A04260        ROR              r4, r0, #4  ; get bit 4
   49 00000060 E02442E0        EOR              r4, r4, r0, ROR #5 ; 5 XOR 4
   50 00000064 E0244360        EOR              r4, r4, r0, ROR #6 
                                                            ; 6 XOR 5 XOR 4
   51 00000068 E02443E0        EOR              r4, r4, r0, ROR #7 ; 7 XOR 6 XO
                                                            R 5 XOR 4
   52 0000006C E2044001        AND              r4, r4, #1
   53 00000070         ;
   54 00000070         ; build the final 12-bit result
   55 00000070         ;
   56 00000070 E1822CE4        ORR              r2, r2, r4, ROR #25 ; rotate le
                                                            ft 7 bits
   57 00000074 E2004001        AND              r4, r0, #1  ; get bit 0 from or
                                                            iginal
   58 00000078 E1822104        ORR              r2, r2, r4, LSL #2 ; add bit 0 
                                                            into final
   59 0000007C E3C040F1        BIC              r4, r0, #0xF1 ; get bits 3,2,1
   60 00000080 E1822184        ORR              r2, r2, r4, LSL #3 ; add bits 3
                                                            ,2,1 to final
   61 00000084 E3C0400F        BIC              r4, r0, #0x0F 
                                                            ; get upper nibble
   62 00000088 E1822204        ORR              r2, r2, r4, LSL #4 ; r2 now con
                                                            tains 12 bits
   63 0000008C E5852000        STR              r2, [r5]
   64 00000090         ; with checksums
   65 00000090 EAFFFFFE 
                       done    B                done
   66 00000094                 ALIGN
   67 00000094         arraya
   68 00000094 B5              DCB              0xB5
   69 00000095 AA              DCB              0xAA
   70 00000096 55              DCB              0x55
   71 00000097 AA              DCB              0xAA
   72 00000098                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 528" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

HAMMING 00000000

Symbol: HAMMING
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: HAMMING unused
arraya 00000094

Symbol: arraya
   Definitions
      At line 67 in file main.s
   Uses
      At line 12 in file main.s
Comment: arraya used once
done 00000090

Symbol: done
   Definitions
      At line 65 in file main.s
   Uses
      At line 65 in file main.s
Comment: done used once
main 00000000

Symbol: main
   Definitions
      At line 9 in file main.s
   Uses
      None
Comment: main unused
4 symbols
336 symbols in table
