


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             EXAMPLE, CODE
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         ; Define memory addresses
    5 00000000 E3A00101        LDR              R0, =0x40000000
    6 00000004 E59F109C        LDR              R1, =0x8765ABCD
    7 00000008 E59F209C        LDR              R2, =0xCDEF6543
    8 0000000C E59F309C        LDR              R3, =0xFACEBEEF
    9 00000010 E59F409C        LDR              R4, =0x87654321
   10 00000014 E5801000        STR              R1, [R0]
   11 00000018 E5802004        STR              R2, [R0, #0x04]
   12 0000001C E5803008        STR              R3, [R0, #0x08]
   13 00000020 E580400C        STR              R4, [R0, #0x0C]
   14 00000024         
   15 00000024         ; Call subroutine sub1
   16 00000024         ;BL sub1
   17 00000024         
   18 00000024         ; Call subroutine sub2
   19 00000024 EB000007        BL               sub2
   20 00000028         
   21 00000028         ; Infinite loop to halt the program
   22 00000028 EAFFFFFE 
                       STOP    B                STOP
   23 0000002C         
   24 0000002C         sub1
   25 0000002C E59F4084        LDR              R4, =0x00000A28
   26 00000030 E5902000        LDR              R2, [R0]    ; Load the word fro
                                                            m memory address 0x
                                                            40000000
   27 00000034 E1120004        TST              R2, R4      ; Test bits 3, 4, 5
                                                            , 9, and 11
   28 00000038 13C33008        BICNE            R3, #8      ; Set R3 to 1 if th
                                                            e result is not zer
                                                            o (odd parity)
   29 0000003C 03833008        ORREQ            R3, #8      ; Set R3 to 0 if th
                                                            e result is zero (e
                                                            ven parity)
   30 00000040         ;LSL R3, R3, #8       ; Shift the result to the position
                        of bit 8
   31 00000040 E5803008        STR              R3, [R0, #0x08] ; Store the res
                                                            ult in the word at 
                                                            memory address 0x40
                                                            000008
   32 00000044 E12FFF1E        BX               LR
   33 00000048         
   34 00000048         sub2
   35 00000048 E5902000        LDR              R2, [R0]    ; Load the word fro
                                                            m memory address 0x
                                                            40000000
   36 0000004C E1A03322        LSR              R3, R2, #6  ; Shift right to ge
                                                            t bit 6 to bit 0
   37 00000050 E2033001        AND              R3, R3, #1  ; Extract bit 6
   38 00000054 E5904000        LDR              R4, [R0]    ; Load the word aga
                                                            in
   39 00000058 E1A054A4        LSR              R5, R4, #9  ; Shift right to ge
                                                            t bit 9 to bit 0
   40 0000005C E2055001        AND              R5, R5, #1  ; Extract bit 9
   41 00000060 E5906000        LDR              R6, [R0]    ; Load the word aga
                                                            in



ARM Macro Assembler    Page 2 


   42 00000064 E1A076A6        LSR              R7, R6, #13 ; Shift right to ge
                                                            t bit 13 to bit 0
   43 00000068 E2077001        AND              R7, R7, #1  ; Extract bit 13
   44 0000006C E5908000        LDR              R8, [R0]    ; Load the word aga
                                                            in
   45 00000070 E1A09828        LSR              R9, R8, #16 ; Shift right to ge
                                                            t bit 16 to bit 0
   46 00000074 E2099001        AND              R9, R9, #1  ; Extract bit 16
   47 00000078 E590A000        LDR              R10, [R0]   ; Load the word aga
                                                            in
   48 0000007C E1A0B9AA        LSR              R11, R10, #19 ; Shift right to 
                                                            get bit 19 to bit 0
                                                            
   49 00000080 E20BB001        AND              R11, R11, #1 ; Extract bit 19
   50 00000084 E183C005        ORR              R12, R3, R5 ; Combine the extra
                                                            cted bits
   51 00000088 E18CC007        ORR              R12, R12, R7
   52 0000008C E18CC009        ORR              R12, R12, R9
   53 00000090 E18CC00B        ORR              R12, R12, R11
   54 00000094 E1A0CA0C        LSL              R12, R12, #20 ; Shift the resul
                                                            t to the position o
                                                            f bit 20
   55 00000098 E5903008        LDR              R3, [R0, #0x08]
   56 0000009C E183C00C        ORR              R12, R3, R12
   57 000000A0 E580C008        STR              R12, [R0, #0x08] ; Store the re
                                                            sult in the word at
                                                             memory address 0x4
                                                            0000008
   58 000000A4 E12FFF1E        BX               LR
   59 000000A8         
   60 000000A8                 END
              8765ABCD 
              CDEF6543 
              FACEBEEF 
              87654321 
              00000A28 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\main.d -o.\objects\main.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMS
IS\Include -IC:\Keil_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine
="__UVISION_VERSION SETA 528" --list=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

EXAMPLE 00000000

Symbol: EXAMPLE
   Definitions
      At line 1 in file main.s
   Uses
      None
Comment: EXAMPLE unused
STOP 00000028

Symbol: STOP
   Definitions
      At line 22 in file main.s
   Uses
      At line 22 in file main.s
Comment: STOP used once
sub1 0000002C

Symbol: sub1
   Definitions
      At line 24 in file main.s
   Uses
      None
Comment: sub1 unused
sub2 00000048

Symbol: sub2
   Definitions
      At line 34 in file main.s
   Uses
      At line 19 in file main.s
Comment: sub2 used once
4 symbols
338 symbols in table
